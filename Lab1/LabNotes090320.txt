Lab Notes 09/03/20:



To login without help of script:
ssh -X pi@128.206.19.XX
     ^ Indicates graphic interface will be used
To access the via the file explorer (without mount):
Connect to Server -> ssh://128.206.19.XX -> U: pi P: roomc1251



How to write a Kernel Module:

BASIC C++/C# -
    int main(){

    }

    Compilation Steps: Lab1.c -(compile)> Lab1.o -(link)> Lab1.exe
        Library file types... For functions located elsewhere.
        .a - static (looks for these while linking)
        .so -dynamic

    To run:
        ./Lab1.exe

KERNEL Module
    init_module(){
        /**
        printk("Hello World");
        **/
    }
    cleanup_module(){
        prink("Goodbye");
    }

    STACK -> User_Space_Module (where we've been until previously) -> O.S. -> Hardware
        - Need to be careful when writing a module (infinite while loop results in need to
            reboot the entire system)

    Compilation Steps: No linker. Only need to use compilers in OS. No need for third party comps.
        - This means we cannot use most external function, we are restricted to kernel module functions.

    To run:
        sudo insmod Lab1.KO (kernel object file)

    To remove:
        sudo rmmod Lab1.KO (Tab = autocomplete)

    To access log file:
        dmesg

    Differences:
        - No linking
        - No external .o system functions
        - Instead of main we have two different function blocks, init_module and cleaup_module

Makefile Notes:
obj-m+=Lab1_P1.o
ccflags-y := -std=gnu99 -Wno-declaration-after-statement

all:
	make -C  /lib/modules/$(shell uname -r)/build M=$(PWD) modules
            Change dir to build, then uses the current directory to build modules and brings them back to the root
clean:
	make -C  /lib/modules/$(shell uname -r)/build M=$(PWD) clean
            Go back to the build dir and then remove/clean all of the modules

Lab Hints:
Step 1: Configure IO pin
- 6,7,8 FSEL2 turn On
    .000 = GPIO Pin Input Mode
    .001 = GPIO Pin Output Mode
Step 2: Configure GPSET command to turn on LED
Step 3: Configure GPCCLR command to turn off the LED-
Step 4: After done with kernel module
    // GPFSEL0 -> Sel 3 bits
    // GPFSET0 -> Set the LED on
Step 5: Cleanup
    // gpsel0
    // gpcl0

Last Example - 
unsigned long * gpsel0 = (unsigned long *)ioremap(0x3f200000 4096)
                                                    ^physical address and not virtual
            
Pins???

There will be 32 bits
8 7 6   5 4 3   2 1 0
--3--   --2--   --1-- Pin inputs - OX40 -> ob00100000 means pin 2 is an output

Lab1_P3.c Notes:

Will use these instructions for this part of the lab -
1) GPCLR0
2) GPSET0
3) GPFSEL0 - KNOW
4) GPAREN0 - Rising edge detect
5) GPEDS0 - GPEDS0 means event not detected on GPIO pin 0... NOT COVERED IN THIS LAB
6) GPPUD - GPIO Pin Pull-up/down enable
7) GPPUDCLK0 - GPIO Pin Pull-up/down Enable Clock 0

Steps:
1. Get address to push button and set it to input (BCMS 16-20)
    gpsel, gpset
2. Configure to trigger interupt
    {
        GPPUD // Require pull down (makes all noise 0)
            //can configure 0 & 1... 2-31 not used
            PUD - GPIO Pin Pull-up/down
            00 = Off â€“ disable pull-up/down
            01 = Enable Pull Down control
            10 = Enable Pull Up control
            11 = Reserved
            *Use in conjunction with GPPUDCLK0/1/2
        GPPUDCLK //can configure 0... 1-31 not used
            0 = No Effect
            1 = Assert Clock on line (n)
            *Must be used in conjunction with GPPUD
    }
    a) GPPUD : 0b01 (pulldown)
    b) Udelay(100) ~ 150 cycles
    c) CPPUDCLK0 -> bits 16-20 0x11111000..etc (16-20)
    d) Udelay(100) ~ 150 cycles
    e) GPPUD : 0b00 (disable)
    f) GPPUDCLK : bit 16-20 0x000000...etc
3. ISR (bind the ISR to interupt) (not a function 79)

    PsuedoCode:

    While loop would be a poor use of processing power
    while(){
        pin 1 - Read from GPSET0
    }

    interrupts would be much better (Highest priority)
        - Used for small chunks of work

        ISR INSTRUCTION:
        
        request_irq(79) // Take parameters (line number - 79) bind to service routine
            
        free_irq(79) // Take parameters (line number - 79) free from service routine

        // When OS calls the function it will keep calling until
        // interupt is clear. 
        ISR_MY{
            // Disable 79
            /* ACTUAL CODE
                i) Check button
                    Detect which button is pressed using GPEDS0 (READ)
                ii) Do your stuff
            */
            // Clear interupt
                Write into GPEDS0 bit 16-20 11111 Without this would call the same ISR again and again
            // Re-enable 79 (So the interupt will work next time)
        }

    ISR CLEANUP INSTRUCTION:

    init_module{
        request_irq(79);
    }

    cleanup_module{
        free_irq(79);
    }
4. Enable interupt (79)
    enable_irq(79);
Need to be rising edge sensitive (GPARN0) for

BCM BrodcomModule (RPi Manufacturer) -> Board Manual Pin Number
GPIO WiringPi (Chip Manufacturer) -> Physical Pin numbers

    